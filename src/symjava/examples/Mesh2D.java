package symjava.examples;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import symjava.symbolic.Domain;
import symjava.symbolic.Domain2D;
import symjava.symbolic.Expr;

/**
 * Create a mesh from two files generated by Triangle
 * (http://www.cs.cmu.edu/~quake/triangle.html)
 * 
 * .node files:
 *    First line: <# of vertices> <dimension (must be 2)> <# of attributes> <# of boundary markers (0 or 1)> 
 *    Remaining lines: <vertex #> <x> <y> [attributes] [boundary marker]
 * 
 * .ele files:
 *    First line: <# of triangles> <nodes per triangle> <# of attributes>
 *    Remaining lines: <triangle #> <node> <node> <node> ... [attributes]
 * 
 */
public class Mesh2D extends Domain2D {
	public List<Node> nodes = new ArrayList<Node>();
	public List<Domain> eles = new ArrayList<Domain>();

	public Mesh2D(String label, Expr ...coordVars) {
		super(label, coordVars);
	}
	
	public List<Domain> getSubDomains() {
		return eles;
	}

	/**
	 * Read a mesh with Triangle format
	 * @param nodeFile
	 * @param eleFile
	 */
	public void readTriangleMesh(String nodeFile, String eleFile) {
		this.readNodes(nodeFile);
		this.readElements(eleFile);
	}
	
	public void readNodes(String nodeFile) {
		FileInputStream in;
		try {
			in = new FileInputStream(nodeFile);
			InputStreamReader reader = new InputStreamReader(in, "UTF-8");
			BufferedReader br = new BufferedReader(reader);
			String str = null;
			int nNode = 0;
			str = br.readLine();
			String[] line = str.trim().split("(\\s)+");
			nNode = Integer.valueOf(line[0]);
			
			while ((str = br.readLine()) != null) {
				//System.out.println(str);
				if (str.startsWith("#"))
					continue;
				line = str.trim().split("(\\s)+");
				int index = Integer.valueOf(line[0]);
				double x = Double.valueOf(line[1]);
				double y = Double.valueOf(line[2]);
				int marker = Integer.valueOf(line[3]);
				Node node = new Node(x,y);
				node.setIndex(index);
				node.setType(marker);
				nodes.add(node);
			}
			br.close();
			in.close();
			if(nNode != nodes.size()) {
				throw new RuntimeException("Number of nodes is not correct!");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void readElements(String eleFile) {
		FileInputStream in;
		try {
			in = new FileInputStream(eleFile);
			InputStreamReader reader = new InputStreamReader(in, "UTF-8");
			BufferedReader br = new BufferedReader(reader);
			String str = null;
			int nEle = 0;
			str = br.readLine();
			String[] line = str.trim().split("(\\s)+");
			nEle = Integer.valueOf(line[0]);
			
			while ((str = br.readLine()) != null) {
				//System.out.println(str);
				if (str.startsWith("#"))
					continue;
				line = str.trim().split("(\\s)+");
				int index = Integer.valueOf(line[0]);
				int n1 = Integer.valueOf(line[1]);
				int n2 = Integer.valueOf(line[2]);
				int n3 = Integer.valueOf(line[3]);
				Element e = new Element(String.format("E%d",index), this.coordVars);
				e.setIndex(index);
				e.setNodes(
						nodes.get(n1-1),
						nodes.get(n2-1),
						nodes.get(n3-1)
						);
				eles.add(e);
			}
			br.close();
			in.close();
			if(nEle != eles.size()) {
				throw new RuntimeException("Number of elements is not correct!");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}	
}
